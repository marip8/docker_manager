#! /usr/bin/env python3

import os
from PyQt5.QtWidgets import QApplication, QMainWindow, QWidget, QCheckBox
from PyQt5.uic import loadUi
import sys

from docker_manager import (
    DockerManagerWidget, create_x11_kwargs, create_sudo_group_add_kwargs, create_ros2_kwargs, create_usb_kwargs,
    update_recursive
)


class SnpDockerWidget(DockerManagerWidget):
    """

    """

    def __init__(self, parent: QWidget = None):
        """
        :param parent:
        """
        super().__init__(parent)

        self.line_edit_image.setText('ghcr.io/ros-industrial-consortium/snp_automate_2023')
        self.line_edit_image.setReadOnly(True)
        self.line_edit_image.editingFinished.emit()

        # Add a check box for simulation
        self.check_box_simulate = QCheckBox('Simulate', self)
        self.layout().addWidget(self.check_box_simulate)

    def _create_app_container(self):
        kwargs = {
            'name': 'snp',
            'image': self.get_full_image_name(),
            'detach': True,
            'stdout': True,
            'privileged': True,
            'network_mode': 'host',
            'environment': {
                'SNP_SIM_ROBOT': self.check_box_simulate.isChecked(),
                'SNP_SIM_VISION': self.check_box_simulate.isChecked(),
                'SNP_BYPASS_EXECUTION': False,
            },
            'volumes': {
                os.path.join(os.getenv('HOME'), '.bashrc'): {
                    'bind': os.path.join(os.getenv('HOME'), '.bashrc'),
                    'mode': 'ro',
                },
                os.path.join(os.getenv('HOME'), 'snp', 'meshes'): {
                    'bind': os.path.join(os.getenv('HOME'), 'snp', 'meshes'),
                },
            }
        }

        update_recursive(kwargs, create_x11_kwargs())
        update_recursive(kwargs, create_sudo_group_add_kwargs())
        update_recursive(kwargs, create_ros2_kwargs())
        update_recursive(kwargs, create_usb_kwargs())

        self._client.containers.run(**kwargs)

    def _create_driver_container(self):
        """

        """
        kwargs = {
            'name': 'micro-ros-agent',
            'image': 'microros/micro-ros-agent:humble',
            'detach': True,
            'command': 'udp4 --port 8888',
            'stdout': True,
            'stdin_open': True,
            'tty': True,
            'privileged': True,
            'network_mode': 'host',
        }
        update_recursive(kwargs, create_ros2_kwargs())

        self._client.containers.run(**kwargs)

    def create_containers(self):
        self._create_app_container()
        if not self.check_box_simulate.isChecked():
            self._create_driver_container()


def main():
    app = QApplication(sys.argv)

    window = QMainWindow()
    widget = SnpDockerWidget(parent=window)
    window.setCentralWidget(widget)
    window.setWindowTitle('Docker Manager')
    window.show()
    app.exec()

if __name__ == '__main__':
    main()
